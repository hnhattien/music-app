# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v3
        with:
          node-version: "14.x"
      - name: Create .env for server
        run: |
          echo "DATABASE_URL=${{secrets.DATABASE_URL}}" >> music-app-server/.env
          echo "IMAGEKIT_PUBLIC_KEY=${{secrets.IMAGEKIT_PUBLIC_KEY}}" >> music-app-server/.env
          echo "IMAGEKIT_PRIVATE_KEY=${{secrets.IMAGEKIT_PRIVATE_KEY}}" >> music-app-server/.env
          echo "IMAGEKIT_URL_ENDPOINT=${{secrets.IMAGEKIT_URL_ENDPOINT}}" >> music-app-server/.env
          echo "UPCARE_SECRET_KEY=${{secrets.UPCARE_SECRET_KEY}}" >> music-app-server/.env
          echo "UPCARE_PUBLIC_KEY=${{secrets.UPCARE_PUBLIC_KEY}}" >> music-app-server/.env
          echo "MAILTRAP_TOKEN=${{secrets.MAILTRAP_TOKEN}}" >> music-app-server/.env
          echo "SENDER_EMAIL=${{secrets.SENDER_EMAIL}}" >> music-app-server/.env
          echo "CROSS_ORIGIN=${{secrets.CROSS_ORIGIN}}" >> music-app-server/.env
      - name: Create .env for client
        run: |
          echo "REACT_APP_API_URL=${{secrets.REACT_APP_API_URL}}" >> music-app-client/.env
          echo "REACT_APP_CDN_IMAGE_URL=${{secrets.REACT_APP_CDN_IMAGE_URL}}" >> music-app-client/.env
          echo "REACT_APP_FACEBOOK_APP_ID=${{secrets.REACT_APP_FACEBOOK_APP_ID}}" >> music-app-client/.env
      - run: cd music-app-server
      - run: npm install
      - run: npm run build --if-present
      - run: npm install -g pm2
      - run: npm cd ../music-app-client
      - run: npm install
      - run: npm run build --if-present
